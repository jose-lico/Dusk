const char phong_frag[] = { "#version 330 core\n\
\n\
in vec2 TexCoords;\n\
in vec3 Normal;\n\
in vec3 FragPos;\n\
\n\
out vec4 FragColor;\n\
\n\
const int MAX_LIGHTS = 8;\n\
\n\
struct DirectionalLight\n\
{\n\
    bool Enabled;\n\
\n\
    vec3 Direction;\n\
    vec3 Color;\n\
};\n\
\n\
struct PointLight {\n\
\n\
    bool Enabled;\n\
\n\
    vec3 Color;\n\
    vec3 Position;\n\
\n\
    float Constant;\n\
    float Linear;\n\
    float Quadratic;\n\
};\n\
\n\
uniform vec3 e_ViewPosition;\n\
uniform int e_DirectionalLightsCount;\n\
uniform int e_PointLightsCount;\n\
uniform DirectionalLight e_DirectionalLights[MAX_LIGHTS];\n\
uniform PointLight e_PointLights[MAX_LIGHTS];\n\
\n\
vec3 CalcDirLight(DirectionalLight light, vec3 viewDir);\n\
vec3 CalcPointLight(PointLight light, vec3 viewDir);\n\
\n\
void main()\n\
{\n\
    vec3 total = vec3(0.0);\n\
    vec3 viewDir = normalize(e_ViewPosition - FragPos);\n\
\n\
    for(int i = 0; i < e_DirectionalLightsCount; i++) {\n\
        total += CalcDirLight(e_DirectionalLights[i], viewDir);\n\
    }\n\
\n\
    for(int i = 0; i < e_PointLightsCount; i++) {\n\
        total += CalcPointLight(e_PointLights[i], viewDir);\n\
    }\n\
\n\
    FragColor = vec4(total, 1.0);\n\
}\n\
\n\
vec3 CalcDirLight(DirectionalLight light, vec3 viewDir)\n\
{\n\
    if(!light.Enabled)\n\
    {\n\
        return vec3(0.0, 0.0, 0.0);\n\
    }\n\
    vec3 lightDir = normalize(-light.Direction);\n\
\n\
	float ambientStrength = 0.2;\n\
    vec3 ambient = light.Color * ambientStrength;\n\
\n\
    float diff = max(dot(normalize(Normal), lightDir), 0.0);\n\
    vec3 diffuse = light.Color * diff;\n\
\n\
    float specularStrength = 0.5;\n\
	vec3 reflectDir = reflect(-lightDir, normalize(Normal));\n\
	float spec =  pow(max(dot(viewDir, reflectDir), 0.0), 32);\n\
    vec3 specular = light.Color * spec;\n\
\n\
    return (ambient + diffuse + specular);\n\
}\n\
\n\
vec3 CalcPointLight(PointLight light, vec3 viewDir)\n\
{\n\
    if(!light.Enabled)\n\
    {\n\
        return vec3(0.0, 0.0, 0.0);\n\
    }\n\
    light.Constant = 1.0;\n\
    light.Linear = 0.09;\n\
    light.Quadratic = 0.032;\n\
\n\
    vec3 lightDir = normalize(light.Position - FragPos);\n\
\n\
    float diff = max(dot(normalize(Normal), lightDir), 0.0);\n\
    vec3 diffuse  = light.Color * diff;\n\
\n\
    vec3 reflectDir = reflect(-lightDir, normalize(Normal));\n\
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);\n\
    vec3 specular = light.Color * spec;\n\
\n\
    float distance = length(light.Position - FragPos);\n\
    float attenuation = 1.0 / (light.Constant + light.Linear * distance + \n\
  			     light.Quadratic * (distance * distance));\n\
\n\
    diffuse  *= attenuation;\n\
    specular *= attenuation;\n\
    return (diffuse + specular);\n\
}"
};